(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{446:function(a,e,s){"use strict";s.r(e);var t=s(26),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"kubernetes集群资源监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes集群资源监控"}},[a._v("#")]),a._v(" Kubernetes集群资源监控")]),a._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("h3",{attrs:{id:"监控指标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监控指标"}},[a._v("#")]),a._v(" 监控指标")]),a._v(" "),s("p",[a._v("一个好的系统，主要监控以下内容")]),a._v(" "),s("ul",[s("li",[a._v("集群监控\n"),s("ul",[s("li",[a._v("节点资源利用率")]),a._v(" "),s("li",[a._v("节点数")]),a._v(" "),s("li",[a._v("运行Pods")])])]),a._v(" "),s("li",[a._v("Pod监控\n"),s("ul",[s("li",[a._v("容器指标")]),a._v(" "),s("li",[a._v("应用程序【程序占用多少CPU、内存】")])])])]),a._v(" "),s("h3",{attrs:{id:"监控平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监控平台"}},[a._v("#")]),a._v(" 监控平台")]),a._v(" "),s("p",[a._v("使用普罗米修斯【prometheus】 + Grafana 搭建监控平台")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("prometheus【定时搜索被监控服务的状态】")]),a._v(" "),s("ul",[s("li",[a._v("开源的")]),a._v(" "),s("li",[a._v("监控、报警、数据库")]),a._v(" "),s("li",[a._v("以HTTP协议周期性抓取被监控组件状态")]),a._v(" "),s("li",[a._v("不需要复杂的集成过程，使用http接口接入即可")])])]),a._v(" "),s("li",[s("p",[a._v("Grafana")]),a._v(" "),s("ul",[s("li",[a._v("开源的数据分析和可视化工具")]),a._v(" "),s("li",[a._v("支持多种数据源")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120082257441.png",alt:"image-20201120082257441"}})]),a._v(" "),s("h2",{attrs:{id:"部署prometheus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署prometheus"}},[a._v("#")]),a._v(" 部署prometheus")]),a._v(" "),s("p",[a._v("首先需要部署一个守护进程")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120083606298.png",alt:"image-20201120083606298"}})]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter\n  namespace: kube-system\n  labels:\n    k8s-app: node-exporter\nspec:\n  selector:\n    matchLabels:\n      k8s-app: node-exporter\n  template:\n    metadata:\n      labels:\n        k8s-app: node-exporter\n    spec:\n      containers:\n      - image: prom/node-exporter\n        name: node-exporter\n        ports:\n        - containerPort: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9100")]),a._v("\n          protocol: TCP\n          name: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: node-exporter\n  name: node-exporter\n  namespace: kube-system\nspec:\n  ports:\n  - name: http\n    port: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9100")]),a._v("\n    nodePort: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("31672")]),a._v("\n    protocol: TCP\n  type: NodePort\n  selector:\n    k8s-app: node-exporter\n")])])]),s("p",[a._v("然后执行下面命令")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl create -f node-exporter.yaml\n")])])]),s("p",[a._v("执行完，发现会报错")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120084034160.png",alt:"image-20201120084034160"}})]),a._v(" "),s("p",[a._v("这是因为版本不一致的问题，因为发布的正式版本，而这个属于测试版本")]),a._v(" "),s("p",[a._v("所以我们找到第一行，然后把内容修改为如下所示")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改前")]),a._v("\napiVersion: extensions/v1beta1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改后 【正式版本发布后，测试版本不能使用】")]),a._v("\napiVersion: apps/v1\n")])])]),s("p",[a._v("创建完成后的效果")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120085721454.png",alt:"image-20201120085721454"}})]),a._v(" "),s("p",[a._v("然后通过yaml的方式部署prometheus")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120083107594.png",alt:"image-20201120083107594"}})]),a._v(" "),s("ul",[s("li",[a._v("configmap：定义一个configmap：存储一些配置文件【不加密】")]),a._v(" "),s("li",[a._v("prometheus.deploy.yaml：部署一个deployment【包括端口号，资源限制】")]),a._v(" "),s("li",[a._v("prometheus.svc.yaml：对外暴露的端口")]),a._v(" "),s("li",[a._v("rbac-setup.yaml：分配一些角色的权限")])]),a._v(" "),s("p",[a._v("下面我们进入目录下，首先部署 rbac-setup.yaml")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl create -f rbac-setup.yaml\n")])])]),s("p",[s("img",{attrs:{src:"images/image-20201120090002150.png",alt:"image-20201120090002150"}})]),a._v(" "),s("p",[a._v("然后分别部署")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 部署configmap")]),a._v("\nkubectl create -f configmap.yaml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 部署deployment")]),a._v("\nkubectl create -f prometheus.deploy.yml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 部署svc")]),a._v("\nkubectl create -f prometheus.svc.yml\n")])])]),s("p",[a._v("部署完成后，我们使用下面命令查看")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get pods -n kube-system\n")])])]),s("p",[s("img",{attrs:{src:"images/image-20201120093213576.png",alt:"image-20201120093213576"}})]),a._v(" "),s("p",[a._v("在我们部署完成后，即可看到 prometheus 的 pod了，然后通过下面命令，能够看到对应的端口")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get svc -n kube-system\n")])])]),s("p",[s("img",{attrs:{src:"images/image-20201121091348752.png",alt:"image-20201121091348752"}})]),a._v(" "),s("p",[a._v("通过这个，我们可以看到 "),s("code",[a._v("prometheus")]),a._v(" 对外暴露的端口为 30003，访问页面即可对应的图形化界面")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("http://192.168.177.130:30003\n")])])]),s("p",[s("img",{attrs:{src:"images/image-20201121091508851.png",alt:"image-20201121091508851"}})]),a._v(" "),s("p",[a._v("在上面我们部署完prometheus后，我们还需要来部署grafana")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl create -f grafana-deploy.yaml\n")])])]),s("p",[a._v("然后执行完后，发现下面的问题")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("error: unable to recognize "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"grafana-deploy.yaml"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" no matches "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" kind "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Deployment"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" version "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"extensions/v1beta1"')]),a._v("\n")])])]),s("p",[a._v("我们需要修改如下内容")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改")]),a._v("\napiVersion: apps/v1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 添加selector")]),a._v("\nspec:\n  replicas: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  selector:\n    matchLabels:\n      app: grafana\n      component: core\n")])])]),s("p",[a._v("修改完成后，我们继续执行上述代码")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建deployment")]),a._v("\nkubectl create -f grafana-deploy.yaml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建svc")]),a._v("\nkubectl create -f grafana-svc.yaml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建 ing")]),a._v("\nkubectl create -f grafana-ing.yaml\n")])])]),s("p",[a._v("我们能看到，我们的grafana正在")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120110426534.png",alt:"image-20201120110426534"}})]),a._v(" "),s("h3",{attrs:{id:"配置数据源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置数据源"}},[a._v("#")]),a._v(" 配置数据源")]),a._v(" "),s("p",[a._v("下面我们需要开始打开 Grafana，然后配置数据源，导入数据显示模板")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get svc -n kube-system\n")])])]),s("p",[s("img",{attrs:{src:"images/image-20201120111949197.png",alt:"image-20201120111949197"}})]),a._v(" "),s("p",[a._v("我们可以通过 ip + 30431 访问我们的 grafana 图形化页面")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201120112048887.png",alt:"image-20201120112048887"}})]),a._v(" "),s("p",[a._v("然后输入账号和密码：admin admin")]),a._v(" "),s("p",[a._v("进入后，我们就需要配置 prometheus 的数据源")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092012018.png",alt:"image-20201121092012018"}})]),a._v(" "),s("p",[a._v("和 对应的IP【这里IP是我们的ClusterIP】")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092053215.png",alt:"image-20201121092053215"}})]),a._v(" "),s("h3",{attrs:{id:"设置显示数据的模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置显示数据的模板"}},[a._v("#")]),a._v(" 设置显示数据的模板")]),a._v(" "),s("p",[a._v("选择Dashboard，导入我们的模板")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092312118.png",alt:"image-20201121092312118"}})]),a._v(" "),s("p",[a._v("然后输入 315 号模板")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092418180.png",alt:"image-20201121092418180"}})]),a._v(" "),s("p",[a._v("然后选择 prometheus数据源 mydb，导入即可")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092443266.png",alt:"image-20201121092443266"}})]),a._v(" "),s("p",[a._v("导入后的效果如下所示")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201121092610154.png",alt:"image-20201121092610154"}})])])}),[],!1,null,null,null);e.default=r.exports}}]);