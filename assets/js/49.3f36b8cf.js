(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{453:function(a,t,e){"use strict";e.r(t);var s=e(26),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"kubernetes控制器controller详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes控制器controller详解"}},[a._v("#")]),a._v(" Kubernetes控制器Controller详解")]),a._v(" "),e("h2",{attrs:{id:"statefulset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#statefulset"}},[a._v("#")]),a._v(" Statefulset")]),a._v(" "),e("p",[a._v("Statefulset主要是用来部署有状态应用")]),a._v(" "),e("p",[a._v("对于StatefulSet中的Pod，每个Pod挂载自己独立的存储，如果一个Pod出现故障，从其他节点启动一个同样名字的Pod，要挂载上原来Pod的存储继续以它的状态提供服务。")]),a._v(" "),e("h3",{attrs:{id:"无状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无状态应用"}},[a._v("#")]),a._v(" 无状态应用")]),a._v(" "),e("p",[a._v("我们原来使用 deployment，部署的都是无状态的应用，那什么是无状态应用？")]),a._v(" "),e("ul",[e("li",[a._v("认为Pod都是一样的")]),a._v(" "),e("li",[a._v("没有顺序要求")]),a._v(" "),e("li",[a._v("不考虑应用在哪个node上运行")]),a._v(" "),e("li",[a._v("能够进行随意伸缩和扩展")])]),a._v(" "),e("h3",{attrs:{id:"有状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有状态应用"}},[a._v("#")]),a._v(" 有状态应用")]),a._v(" "),e("p",[a._v("上述的因素都需要考虑到")]),a._v(" "),e("ul",[e("li",[a._v("让每个Pod独立的")]),a._v(" "),e("li",[a._v("让每个Pod独立的，保持Pod启动顺序和唯一性")]),a._v(" "),e("li",[a._v("唯一的网络标识符，持久存储")]),a._v(" "),e("li",[a._v("有序，比如mysql中的主从")])]),a._v(" "),e("p",[a._v("适合StatefulSet的业务包括数据库服务MySQL 和 PostgreSQL，集群化管理服务Zookeeper、etcd等有状态服务")]),a._v(" "),e("p",[a._v("StatefulSet的另一种典型应用场景是作为一种比普通容器更稳定可靠的模拟虚拟机的机制。传统的虚拟机正是一种有状态的宠物，运维人员需要不断地维护它，容器刚开始流行时，我们用容器来模拟虚拟机使用，所有状态都保存在容器里，而这已被证明是非常不安全、不可靠的。")]),a._v(" "),e("p",[a._v("使用StatefulSet，Pod仍然可以通过漂移到不同节点提供高可用，而存储也可以通过外挂的存储来提供\n高可靠性，StatefulSet做的只是将确定的Pod与确定的存储关联起来保证状态的连续性。")]),a._v(" "),e("h3",{attrs:{id:"部署有状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署有状态应用"}},[a._v("#")]),a._v(" 部署有状态应用")]),a._v(" "),e("p",[a._v("无头service， ClusterIp：none")]),a._v(" "),e("p",[a._v("这里就需要使用 StatefulSet部署有状态应用")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117202950336.png",alt:"image-20201117202950336"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117203130867.png",alt:"image-20201117203130867"}})]),a._v(" "),e("p",[a._v("然后通过查看pod，能否发现每个pod都有唯一的名称")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117203217016.png",alt:"image-20201117203217016"}})]),a._v(" "),e("p",[a._v("然后我们在查看service，发现是无头的service")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117203245641.png",alt:"image-20201117203245641"}})]),a._v(" "),e("p",[a._v("这里有状态的约定，肯定不是简简单单通过名称来进行约定，而是更加复杂的操作")]),a._v(" "),e("ul",[e("li",[a._v("deployment：是有身份的，有唯一标识")]),a._v(" "),e("li",[a._v("statefulset：根据主机名 + 按照一定规则生成域名")])]),a._v(" "),e("p",[a._v("每个pod有唯一的主机名，并且有唯一的域名")]),a._v(" "),e("ul",[e("li",[a._v("格式：主机名称.service名称.名称空间.svc.cluster.local")]),a._v(" "),e("li",[a._v("举例：nginx-statefulset-0.default.svc.cluster.local")])]),a._v(" "),e("h2",{attrs:{id:"daemonset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#daemonset"}},[a._v("#")]),a._v(" DaemonSet")]),a._v(" "),e("p",[a._v("DaemonSet 即后台支撑型服务，主要是用来部署守护进程")]),a._v(" "),e("p",[a._v("长期伺服型和批处理型的核心在业务应用，可能有些节点运行多个同类业务的Pod，有些节点上又没有这类的Pod运行；而后台支撑型服务的核心关注点在K8S集群中的节点(物理机或虚拟机)，要保证每个节点上都有一个此类Pod运行。节点可能是所有集群节点，也可能是通过 nodeSelector选定的一些特定节点。典型的后台支撑型服务包括：存储、日志和监控等。在每个节点上支撑K8S集群运行的服务。")]),a._v(" "),e("p",[a._v("守护进程在我们每个节点上，运行的是同一个pod，新加入的节点也同样运行在同一个pod里面")]),a._v(" "),e("ul",[e("li",[a._v("例子：在每个node节点安装数据采集工具")])]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117204430836.png",alt:"image-20201117204430836"}})]),a._v(" "),e("p",[a._v("这里是不是一个FileBeat镜像，主要是为了做日志采集工作")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117204810350.png",alt:"image-20201117204810350"}})]),a._v(" "),e("p",[a._v("进入某个 Pod里面，进入")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it ds-test-cbk6v "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),e("p",[a._v("通过该命令后，我们就能看到我们内部收集的日志信息了")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117204912838.png",alt:"image-20201117204912838"}})]),a._v(" "),e("h2",{attrs:{id:"job和cronjob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#job和cronjob"}},[a._v("#")]),a._v(" Job和CronJob")]),a._v(" "),e("p",[a._v("一次性任务 和 定时任务")]),a._v(" "),e("ul",[e("li",[a._v("一次性任务：一次性执行完就结束")]),a._v(" "),e("li",[a._v("定时任务：周期性执行")])]),a._v(" "),e("p",[a._v("Job是K8S中用来控制批处理型任务的API对象。批处理业务与长期伺服业务的主要区别就是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出了。成功完成的标志根据不同的 spec.completions 策略而不同：单Pod型任务有一个Pod成功就标志完成；定数成功行任务保证有N个任务全部成功；工作队列性任务根据应用确定的全局成功而标志成功。")]),a._v(" "),e("h3",{attrs:{id:"job"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#job"}},[a._v("#")]),a._v(" Job")]),a._v(" "),e("p",[a._v("Job也即一次性任务")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117205635945.png",alt:"image-20201117205635945"}})]),a._v(" "),e("p",[a._v("使用下面命令，能够看到目前已经存在的Job")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl get "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("jobs")]),a._v("\n")])])]),e("p",[e("img",{attrs:{src:"images/image-20201117205948374.png",alt:"image-20201117205948374"}})]),a._v(" "),e("p",[a._v("在计算完成后，通过命令查看，能够发现该任务已经完成")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117210031725.png",alt:"image-20201117210031725"}})]),a._v(" "),e("p",[a._v("我们可以通过查看日志，查看到一次性任务的结果")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl logs pi-qpqff\n")])])]),e("p",[e("img",{attrs:{src:"images/image-20201117210110343.png",alt:"image-20201117210110343"}})]),a._v(" "),e("h3",{attrs:{id:"cronjob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cronjob"}},[a._v("#")]),a._v(" CronJob")]),a._v(" "),e("p",[a._v("定时任务，cronjob.yaml如下所示")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117210309069.png",alt:"image-20201117210309069"}})]),a._v(" "),e("p",[a._v("这里面的命令就是每个一段时间，这里是通过 cron 表达式配置的，通过 schedule字段")]),a._v(" "),e("p",[a._v("然后下面命令就是每个一段时间输出")]),a._v(" "),e("p",[a._v("我们首先用上述的配置文件，创建一个定时任务")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl apply -f cronjob.yaml\n")])])]),e("p",[a._v("创建完成后，我们就可以通过下面命令查看定时任务")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl get cronjobs\n")])])]),e("p",[e("img",{attrs:{src:"images/image-20201117210611783.png",alt:"image-20201117210611783"}})]),a._v(" "),e("p",[a._v("我们可以通过日志进行查看")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl logs hello-1599100140-wkn79\n")])])]),e("p",[e("img",{attrs:{src:"images/image-20201117210722556.png",alt:"image-20201117210722556"}})]),a._v(" "),e("p",[a._v("然后每次执行，就会多出一个 pod")]),a._v(" "),e("p",[e("img",{attrs:{src:"images/image-20201117210751068.png",alt:"image-20201117210751068"}})]),a._v(" "),e("h2",{attrs:{id:"删除svc-和-statefulset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除svc-和-statefulset"}},[a._v("#")]),a._v(" 删除svc 和 statefulset")]),a._v(" "),e("p",[a._v("使用下面命令，可以删除我们添加的svc 和 statefulset")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("kubectl delete svc web\n\nkubectl delete statefulset --all\n")])])]),e("h2",{attrs:{id:"replication-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replication-controller"}},[a._v("#")]),a._v(" Replication Controller")]),a._v(" "),e("p",[a._v("Replication Controller 简称 "),e("strong",[a._v("RC")]),a._v("，是K8S中的复制控制器。RC是K8S集群中最早的保证Pod高可用的API对象。通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。指定的数目可以是多个也可以是1个；少于指定数目，RC就会启动新的Pod副本；多于指定数目，RC就会杀死多余的Pod副本。")]),a._v(" "),e("p",[a._v("即使在指定数目为1的情况下，通过RC运行Pod也比直接运行Pod更明智，因为RC也可以发挥它高可用的能力，保证永远有一个Pod在运行。RC是K8S中较早期的技术概念，只适用于长期伺服型的业务类型，比如控制Pod提供高可用的Web服务。")]),a._v(" "),e("h3",{attrs:{id:"replica-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replica-set"}},[a._v("#")]),a._v(" Replica Set")]),a._v(" "),e("p",[a._v("Replica Set 检查 RS，也就是副本集。RS是新一代的RC，提供同样高可用能力，区别主要在于RS后来居上，能够支持更多种类的匹配模式。副本集对象一般不单独使用，而是作为Deployment的理想状态参数来使用")])])}),[],!1,null,null,null);t.default=v.exports}}]);